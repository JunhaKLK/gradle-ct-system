import java.io.*;
import java.util.Arrays;

public class Main {

    // https://www.acmicpc.net/problem/10971

    private static int maxDepth;
    private static boolean[] isVisited;
    private static int minSum;

    private static void backtrack(int[][] w,int prevDest, int depth, int sum) {
        if (maxDepth == depth) {
            sum += w[prevDest][0];

            if (minSum > sum) {
                minSum = sum;
            }
            return;
        }

        if (minSum < sum) return;


        for (int destCandidate = 1; destCandidate < w.length; destCandidate++) {
            if (!isVisited[destCandidate]) {
                isVisited[destCandidate] = true;
                backtrack(w, destCandidate, depth + 1, sum + w[prevDest][destCandidate]);
                isVisited[destCandidate] = false;
            }
        }
    }

    public static void problemSolver() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int n = Integer.parseInt(br.readLine());
        maxDepth = n - 1;
        isVisited = new boolean[n];
        minSum = Integer.MAX_VALUE;

        int[][] w = new int[n][];

        for (int i = 0; i < n; i++) {
            String[] input = br.readLine().split(" ");
            w[i] = new int[n];
            Arrays.fill(w[i], 2000001);
            for (int j = 0; j < n; j++) {
                int dist = Integer.parseInt(input[j]);
                if (dist != 0) w[i][j] = dist;
            }
        }

        for (int start = 0; start < n; start++) {
            for (int dest = 0; dest < n; dest++) {
                for (int k = 0; k < n; k++) {
                    w[start][dest] = Math.min(w[start][dest], w[start][k] + w[k][dest]);
                }
            }
        }

        isVisited[0] = true;
        for (int dest = 1; dest < n; dest++) {
            isVisited[dest] = true;
            backtrack(w, dest, 1, w[0][dest]);
        }

        System.out.println(minSum);

        bw.flush();
        br.close();
        bw.close();
    }

    public static void main(String[] args) throws IOException {
        problemSolver();
    }
}