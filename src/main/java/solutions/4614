import java.io.*;

public class Main {

    // https://www.acmicpc.net/problem/4614

    private static boolean isLeftStopped(char[] chars, int currentIndex) {
        for (int i = currentIndex - 1; i >= 0; i--) {
            char c = chars[i];

            if (c == '_') continue;
            if (c == '/' || c == '|' || c == '\\') return true;
            if (c == '.') return false;
        }

        return false;
    }

    private static boolean isRightStopped(char[] chars, int currentIndex) {
        for (int i = currentIndex + 1; i < chars.length; i++) {
            char c = chars[i];

            if (c == '_') continue;
            if (c == '/' || c == '|' || c == '\\') return true;
            if (c == '.') return false;
        }

        return false;
    }

    public static void problemSolver() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        String in = br.readLine();

        StringBuilder sb = new StringBuilder();

        while (!"#".equals(in)) {
            char[] chars = in.toCharArray();
            double[] pos = new double[chars.length];

            for (int i = 0; i < chars.length; i++) {
                char c = chars[i];

                switch (c) {
                    case '/':
                        pos[i] = isLeftStopped(chars, i) ? 0 : 100;
                        break;
                    case '\\':
                        pos[i] = isRightStopped(chars, i) ? 0 : 100;
                        break;
                    case '.':
                        pos[i] = 100;
                        break;
                    case '_':
                        pos[i] = 0;
                        break;
                    case '|':
                        pos[i] += isLeftStopped(chars, i) ? 0 : 100;
                        pos[i] += isRightStopped(chars, i) ? 0 : 100;
                        pos[i] /= 2;
                        break;
                    default:
                        throw new IllegalStateException();
                }
            }

            double sum = 0;
            for (double d : pos) {
                sum += d;
            }

            sb.append((int) (sum / pos.length)).append("\n");

            in = br.readLine();
        }

        bw.write(sb.toString().trim());

        bw.flush();
        br.close();
        bw.close();
    }

    public static void main(String[] args) throws IOException {
        problemSolver();
    }
}