import java.io.*;
import java.util.*;

public class Main {

    // https://www.acmicpc.net/problem/12891

    private static boolean isUsable(int[] exp, int[] cur) {
        for (int i = 0; i < exp.length; i++) {
            if (cur[i] < exp[i]) return false;
        }

        return true;
    }

    private static int indexMapper(char dna) {
        switch (dna) {
            case 'A':
                return 0;
            case 'C':
                return 1;
            case 'G':
                return 2;
            case 'T':
                return 3;
            default:
                throw new IllegalArgumentException();
        }
    }

    public static void problemSolver() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());

        char[] dna = br.readLine().toCharArray();

        int[] acgtMin = Arrays.stream(br.readLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int[] acgtCount = new int[4];

        for (int i = 0; i < m; i++) {
            acgtCount[indexMapper(dna[i])]++;
        }

        long count = 0;

        for (int i = m; i < n; i++) {
            if (isUsable(acgtMin, acgtCount)) {
                ++count;
            }

            acgtCount[indexMapper(dna[i - m])]--;
            acgtCount[indexMapper(dna[i])]++;
        }

        if (isUsable(acgtMin, acgtCount)) {
            ++count;
        }

        bw.write(Long.toString(count));

        bw.flush();
        bw.close();
        br.close();
    }

    public static void main(String[] args) throws IOException {
        problemSolver();
    }
}