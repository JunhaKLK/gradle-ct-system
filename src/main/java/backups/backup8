import java.io.*;
import java.util.*;

public class Main {

    // https://www.acmicpc.net/problem/8896

    private static int convert(char c) {
        switch (c) {
            case 'R':
                return 0;
            case 'S':
                return 1;
            case 'P':
                return 2;
            default:
                throw new IllegalArgumentException();
        }
    }

    private static char convert(int n) {
        switch (n) {
            case 0:
                return 'R';
            case 1:
                return 'S';
            case 2:
                return 'P';
            default:
                throw new IllegalArgumentException();
        }
    }

    private static boolean[] getUnique(List<char[]> list, int round, boolean[] isSurvived) {
        boolean[] isInThisGame = new boolean[3];

        for (int i = 0; i < list.size(); i++) {
            if (isSurvived[i]) {
                isInThisGame[convert(list.get(i)[round])] = true;
            }
        }

        return isInThisGame;
    }

    private static boolean isValid(boolean[] uniques) {
        int count = 0;
        for (boolean b : uniques) {
            if (b) {
                ++count;
            }
        }

        return count == 2;
    }

    private static int whichWins(boolean[] uniques) {
        if (uniques[0] && uniques[1]) {
            return 0;
        } else if (uniques[1] && uniques[2]) {
            return 1;
        } else {
            return 2;
        }
    }

    public static void problemSolver() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int t = Integer.parseInt(br.readLine());

        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < t; i++) {
            int n = Integer.parseInt(br.readLine());

            List<char[]> list = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                list.add(br.readLine().toCharArray());
            }
            boolean[] survived = new boolean[n];
            Arrays.fill(survived, true);

            for (int round = 0; round < list.get(0).length; round++) {
                boolean[] uniques = getUnique(list, round, survived);

                if (isValid(uniques)) {
                    char winnerCode = convert(whichWins(uniques));

                    for (int player = 0; player < list.size(); player++) {
                        if (survived[player] && list.get(player)[round] != winnerCode) {
                            survived[player] = false;
                        }
                    }
                }
            }

            int winner = -1;
            for (int player = 0; player < n; player++) {
                if (survived[player]) {
                    if (winner == -1) {
                        winner = player;
                    } else {
                        winner = -1;
                        break;
                    }
                }
            }

            sb.append(winner == -1 ? 0 : winner + 1);

            sb.append("\n");
        }

        bw.write(sb.toString().trim());

        bw.flush();
        bw.close();
        br.close();
    }

    public static void main(String[] args) throws IOException {
        problemSolver();
    }
}