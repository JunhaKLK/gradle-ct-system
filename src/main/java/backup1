import java.io.*;

public class Main {

    // https://www.acmicpc.net/problem/2750

    private static void merge(int[] arr, int left, int center, int right) {
        int[] result = new int[(center - left) + (right - center)];

        int _left = left;
        int _right = center;

        int i = 0;

        while (_left < center && _right < right) {
            if (arr[_left] < arr[_right]) {
                result[i] = arr[_left];
                _left++;
            } else {
                result[i] = arr[_right];
                _right++;
            }

            i++;
        }

        while (_left < center) {
            result[i] = arr[_left];
            _left++;
            i++;
        }

        while (_right < right) {
            result[i] = arr[_right];
            _right++;
            i++;
        }

        for (int j = 0; j < result.length; j++) {
            arr[left + j] = result[j];
        }
    }

    private static void mergeSort(int[] arr, int p, int q) {
        if (q - p < 2) {
            return;
        }

        mergeSort(arr, p, (p + q) / 2);
        mergeSort(arr, (p + q) / 2, q);
        merge(arr, p, (p + q) / 2, q);
    }

    public static void problemSolver() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int n = Integer.parseInt(br.readLine());

        int[] arr = new int[n];

        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(br.readLine());
        }

        mergeSort(arr, 0, arr.length);

        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < n; i++) {
            sb.append(arr[i]).append("\n");
        }

        bw.write(sb.toString());

        bw.flush();
        bw.close();
        br.close();
    }

    public static void main(String[] args) throws IOException {
        problemSolver();
    }
}