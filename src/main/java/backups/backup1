import java.io.*;
import java.util.*;

public class Main {

    // https://www.acmicpc.net/problem/16965

    private static List<Section> sections;

    private static class Section {
        int id;
        int start;
        int end;
        boolean isVisited;

        public Section(int id, int start, int end) {
            this.id = id;
            this.start = start;
            this.end = end;
            this.isVisited = false;
        }

        List<Integer> movables = new ArrayList<>();
    }

    private static boolean isMovable(Section fromSection, Section toSection) {
        return (toSection.start < fromSection.start && fromSection.start < toSection.end) ||
                (toSection.start < fromSection.end && fromSection.end < toSection.end);
    }

    private static void resetAll() {
        for (Section section : sections) {
            section.isVisited = false;
        }
    }

    private static boolean isConnected(Section fromSection, Section toSection) {
        Queue<Section> queue = new ArrayDeque<>();
        queue.add(fromSection);

        while (!queue.isEmpty()) {
            Section section = queue.poll();
            section.isVisited = true;

            if (section.id == toSection.id) {
                return true;
            }

            for (Integer movable : section.movables) {
                if (!sections.get(movable).isVisited) {
                    queue.add(sections.get(movable));
                }
            }
        }

        return false;
    }

    public static void problemSolver() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int n = Integer.parseInt(br.readLine());

        sections = new ArrayList<>();

        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < n; i++) {
            String[] in = br.readLine().split(" ");

            int type = Integer.parseInt(in[0]);
            int x = Integer.parseInt(in[1]);
            int y = Integer.parseInt(in[2]);

            if (type == 1) {
                Section section = new Section(sections.size(), x, y);

                for (Section storedSection : sections) {
                    if (isMovable(storedSection, section)) {
                        storedSection.movables.add(section.id);
                    }

                    if (isMovable(section, storedSection)) {
                        section.movables.add(storedSection.id);
                    }
                }

                sections.add(section);
            } else {
                resetAll();
                sb.append(isConnected(sections.get(x - 1), sections.get(y - 1)) ? "1" : "0");
                sb.append("\n");
            }
        }

        bw.write(sb.toString().trim());

        bw.flush();
        br.close();
        bw.close();
    }

    public static void main(String[] args) throws IOException {
        problemSolver();
    }
}