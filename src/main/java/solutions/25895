import java.io.*;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;

public class Main {

    // https://www.acmicpc.net/problem/25895

    public static void problemSolver() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int t = Integer.parseInt(br.readLine());

        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < t; i++) {
            String[] arr = br.readLine().split(" ");

            int n = Integer.parseInt(arr[0]);
            int m = Integer.parseInt(arr[1]);

            int[][] board = new int[n][n];
            for (int j = 0; j < n; j++) {
                Arrays.fill(board[j], 3);
            }

            int count = 0;

            for (int j = 0; j < m; j++) {
                String[] inner = br.readLine().split(" ");

                int row = Integer.parseInt(inner[0]) - 1;
                int col = Integer.parseInt(inner[1]) - 1;

                Queue<int[]> queue = new ArrayDeque<>();
                queue.add(new int[]{row, col});

                if (board[row][col] == 0) {
                    ++count;
                }

                board[row][col] = 0;

                while (!queue.isEmpty()) {
                    int[] current = queue.poll();

                    int currentRow = current[0];
                    int currentCol = current[1];

                    for (int internalRow = 0; internalRow < n; internalRow++) {
                        if (board[internalRow][currentCol] == 3) {
                            board[internalRow][currentCol] = 1;
                        } else if (board[internalRow][currentCol] == 2) {
                            board[internalRow][currentCol] = 0;
                            queue.add(new int[] {internalRow, currentCol});
                        }
                    }

                    for (int internalCol = 0; internalCol < n; internalCol++) {
                        if (board[currentRow][internalCol] == 3) {
                            board[currentRow][internalCol] = 2;
                        } else if (board[currentRow][internalCol] == 1) {
                            board[currentRow][internalCol] = 0;
                            queue.add(new int[] {currentRow, internalCol});
                        }
                    }
                }
            }

            sb.append("Strategy #").append(i + 1).append(": ").append(count).append("\n").append("\n");
        }

        bw.write(sb.toString().trim());

        bw.flush();
        bw.close();
        br.close();
    }

    public static void main(String[] args) throws IOException {
        problemSolver();
    }
}