import java.io.*;
import java.util.*;

public class Main {

    // https://www.acmicpc.net/problem/23081

    private static int[] rowAdder = {-1, -1, 0, 1, 1, 1, 0, -1};
    private static int[] colAdder = {0, 1, 1, 1, 0, -1, -1, -1};
    private static int[][] board;

    private static class WhiteSpace {
        int row;
        int col;

        int max = 0;

        public WhiteSpace(int row, int col) {
            this.row = row;
            this.col = col;
        }

        public int getMax() {
            for (int i = 0; i < 8; i++) {
                int[] localMaxStruct = getMaxByDirection(i);

                if (localMaxStruct[0] != -1) {
                    max += localMaxStruct[0];
                }
            }

            return max;
        }

        private int[] getMaxByDirection(int dir) {
            int localRow = row + rowAdder[dir];
            int localCol = col + colAdder[dir];

            int count = 0;

            while (isValid(localRow, localCol)) {
                if (board[localRow][localCol] == 2) {
                    return new int[]{count, localRow, localCol};
                }

                if (board[localRow][localCol] == 0) {
                    return new int[]{-1, -1, -1};
                }

                ++count;
                localRow += rowAdder[dir];
                localCol += colAdder[dir];
            }

            return new int[]{-1, -1, -1};
        }

        private boolean isValid(int row, int col) {
            if (row < 0) return false;
            if (col < 0) return false;
            if (row >= board.length) return false;
            if (col >= board[row].length) return false;

            return true;
        }
    }

    public static void problemSolver() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int n = Integer.parseInt(br.readLine());

        board = new int[n][n];

        Queue<WhiteSpace> queue = new ArrayDeque<>();

        for (int i = 0; i < n; i++) {
            char[] row = br.readLine().toCharArray();

            for (int j = 0; j < n; j++) {
                if (row[j] == 'W') {
                    board[i][j] = 1;
                } else if (row[j] == 'B') {
                    board[i][j] = 2;
                } else {
                    queue.add(new WhiteSpace(i, j));
                }
            }
        }

        int max = -1;
        List<WhiteSpace> whiteSpaces = new ArrayList<>();

        while (!queue.isEmpty()) {
            WhiteSpace currentStone = queue.poll();
            int currentMax = currentStone.getMax();
            if (max < currentMax) {
                max = currentMax;
                whiteSpaces.clear();
                whiteSpaces.add(currentStone);
            } else if (max == currentMax) {
                whiteSpaces.add(currentStone);
            }
        }

        if (whiteSpaces.isEmpty() || max == 0) {
            bw.write("PASS");
        } else {
            whiteSpaces.sort(Comparator.comparingInt((WhiteSpace b) -> b.col)
                    .thenComparing((WhiteSpace b) -> b.row)
            );

            bw.write(whiteSpaces.get(0).col + " " + whiteSpaces.get(0).row);
            bw.newLine();
            bw.write(Integer.toString(max));
        }

        bw.flush();
        br.close();
        bw.close();
    }

    public static void main(String[] args) throws IOException {
        problemSolver();
    }
}