import java.io.*;
import java.util.Arrays;

public class Main {

    // https://www.acmicpc.net/problem/26507

    private static int[][] combine(int[][][] chips, int[] combineTargetIndexes) {
        int[][] result = new int[10][10];

        for (int idx : combineTargetIndexes) {
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    result[i][j] += chips[idx][i][j];
                }
            }
        }

        return result;
    }

    public static void problemSolver() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int n = Integer.parseInt(br.readLine());

        int[][][] chips = new int[n][10][10];

        for (int i = 0; i < n; i++) {
            for (int row = 0; row < 10; row++) {
                chips[i][row] = Arrays.stream(br.readLine().split("")).mapToInt(Integer::parseInt).toArray();
            }
            br.readLine();
        }

        int m = Integer.parseInt(br.readLine());

        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < m; i++) {
            int[][] combineResult = combine(chips, Arrays.stream(br.readLine().split(" ")).mapToInt(Integer::parseInt).toArray());

            for (int row = 0; row < 10; row++) {
                for (int col = 0; col < 10; col++) {
                    if (combineResult[row][col] < 10) {
                        sb.append("0");
                    }

                    sb.append(combineResult[row][col]);
                    if (col != 9) sb.append(" ");
                }
                sb.append("\n");
            }
            sb.append("\n");
        }

        bw.write(sb.toString().trim());

        bw.flush();
        bw.close();
        br.close();
    }

    public static void main(String[] args) throws IOException {
        problemSolver();
    }
}