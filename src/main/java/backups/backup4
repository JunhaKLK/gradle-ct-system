import java.io.*;
import java.util.*;

public class Main {

    // https://www.acmicpc.net/problem/18442

    private static long minDist;
    private static boolean[] isSelected;
    private static boolean[] result;
    private static int p;
    private static long l;
    private static long[] pos;

    private static long getDistance(long a, long b) {
        long diff = a - b;
        if (diff < 0) {
            diff *= -1;
        }

        long cDiff = l - diff;

        if (diff >= cDiff) {
            return cDiff;
        } else {
            return diff;
        }
    }

    private static void updateMinDist() {
        int[] postOfficePos = new int[p];
        int n = 0;
        for (int i = 0; i < isSelected.length; i++) {
            if (isSelected[i]) {
                postOfficePos[n] = i;
                n++;
            }
        }

        long currentSummerizedDistance = 0L;

        for (int i = 0; i < pos.length; i++) {
            long localMin = getDistance(pos[i], pos[postOfficePos[0]]);
            for (int j = 1; j < postOfficePos.length; j++) {
                long dist = getDistance(pos[i], pos[postOfficePos[j]]);

                if (localMin > dist) {
                    localMin = dist;
                }
            }

            currentSummerizedDistance += localMin;
        }

        if (minDist > currentSummerizedDistance) {
            minDist = currentSummerizedDistance;
            result = isSelected.clone();
        }
    }

    private static void backtrack(int selected, int prev) {
        if (selected == p) {
            updateMinDist();
            return;
        }

        for (int i = prev + 1; i < isSelected.length; i++) {
            if (!isSelected[i]) {
                isSelected[i] = true;
                backtrack(selected + 1, i);
                isSelected[i] = false;
            }
        }
    }

    public static void problemSolver() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        minDist = Long.MAX_VALUE;

        StringTokenizer st = new StringTokenizer(br.readLine());

        int v = Integer.parseInt(st.nextToken());
        p = Integer.parseInt(st.nextToken());
        l = Long.parseLong(st.nextToken());

        isSelected = new boolean[v];

        pos = Arrays.stream(br.readLine().split(" ")).mapToLong(Long::parseLong).toArray();

        backtrack(0, -1);

        StringBuilder sb = new StringBuilder();

        sb.append(minDist).append("\n");

        for (int i = 0; i < result.length; i++) {
            if (result[i]) {
                sb.append(pos[i]).append(" ");
            }
        }

        bw.write(sb.toString().trim());

        bw.flush();
        br.close();
        bw.close();
    }

    public static void main(String[] args) throws IOException {
        problemSolver();
    }
}