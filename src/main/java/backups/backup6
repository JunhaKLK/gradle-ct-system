import java.io.*;
import java.util.*;

public class Main {

    // https://www.acmicpc.net/problem/30553

    private static boolean isMatches(int[] expect, int[] compare) {
        for (int i = 0; i < expect.length; i++) {
            if (expect[i] == 0 && expect[i] != compare[i]) {
                return false;
            } else if (expect[i] == 1 && expect[i] != compare[i]) {
                return false;
            }
        }
        return true;
    }

    private static int convert(char c, int prevState) {
        if (prevState == -1) {
            return c == 'Y' ? 1 : 0;
        } else if (prevState == 1) {
            return c == 'N' ? 2 : 1;
        } else {
            return c == 'Y' ? 2 : 0;
        }
    }

    public static void problemSolver() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        int q = Integer.parseInt(st.nextToken());

        List<int[]> ints = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            int[] flags = new int[m];

            char[] arr = br.readLine().toCharArray();
            for (int j = 0; j < m; j++) {
                flags[j] = arr[j] == 'Y' ? 1 : 0;
            }

            ints.add(flags);
        }

        int index = -1;
        int[] guess = new int[m];
        Arrays.fill(guess, -1);
        for (int i = 0; i < q; i++) {
            StringTokenizer st2 = new StringTokenizer(br.readLine());

            int idx = Integer.parseInt(st2.nextToken()) - 1;
            char c = st2.nextToken().charAt(0);

            guess[idx] = convert(c, guess[idx]);
        }

        int count = 0;

        for (int i = 0; i < ints.size(); i++) {
            if (isMatches(guess, ints.get(i))) {
                ++count;
                index = i;
            }
        }

        if (count == 1) {
            bw.write("unique");
            bw.newLine();
            bw.write(Integer.toString(index + 1));
        } else {
            bw.write("ambiguous");
            bw.newLine();
            bw.write(Integer.toString(count));
        }

        bw.flush();
        bw.close();
        br.close();
    }

    public static void main(String[] args) throws IOException {
        problemSolver();
    }
}