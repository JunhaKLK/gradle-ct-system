import java.io.*;
import java.util.Arrays;

public class Main {

    // https://www.acmicpc.net/problem/16991

    static private double[][] dp;
    static private double[][] w;

    static final int maxVal = 16_000_001;
    static int ALL_VISITED;

    private static boolean isVisited(int visited, int targetIdx) {
        return (visited & (1 << targetIdx)) == (1 << targetIdx);
    }

    private static int visit(int visited, int targetIdx) {
        return visited | (1 << targetIdx);
    }

    private static double TSP(int visited, int prevCity) {
        if (visited == ALL_VISITED) {
            if (w[prevCity][0] == 0) {
                return Integer.MAX_VALUE;
            } else {
                dp[visited][prevCity] = w[prevCity][0];
                return w[prevCity][0];
            }
        }

        if (dp[visited][prevCity] != maxVal) {
            return dp[visited][prevCity];
        }

        dp[visited][prevCity] = Integer.MAX_VALUE;
        for (int i = 0; i < w.length; i++) {
            if (!isVisited(visited, i) && w[prevCity][i] != 0) {
                double tspResult = TSP(visit(visited, i), i);
                if (tspResult < maxVal) {
                    dp[visited][prevCity] = Math.min(dp[visited][prevCity], tspResult + w[prevCity][i]);
                }
            }
        }
        return dp[visited][prevCity];
    }

    public static void problemSolver() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int n = Integer.parseInt(br.readLine());

        ALL_VISITED = (1 << n) - 1;
        dp = new double[(1 << n)][n];
        for (double[] ints : dp) {
            Arrays.fill(ints, maxVal);
        }

        int[][] positions = new int[n][2];
        for (int i = 0; i < n; i++) {
            String[] strings = br.readLine().split(" ");
            int x = Integer.parseInt(strings[0]);
            int y = Integer.parseInt(strings[1]);

            positions[i][0] = x;
            positions[i][1] = y;
        }

        w = new double[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                w[i][j] = Math.sqrt((positions[i][0] - positions[j][0]) * (positions[i][0] - positions[j][0])
                        + (positions[i][1] - positions[j][1]) * (positions[i][1] - positions[j][1]));
            }
        }

        bw.write(Double.toString(TSP(visit(0, 0), 0)));
        bw.flush();

        br.close();
        bw.close();
    }

    public static void main(String[] args) throws IOException {
        problemSolver();
    }
}